import { encryptMessage, decryptMessage, generateSessionKey } from "../encryption/e2ee";

// –ö—ç—à —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –ø–∞–º—è—Ç–∏
const sessionKeyCache = new Map<string, string>();

export const encryptChatMessage = async (message: string, token1: string, token2: string) => {
    let sessionKey = sessionKeyCache.get(token1 + token2);

    if (!sessionKey) {
        sessionKey = generateSessionKey(token1, token2);
        sessionKeyCache.set(token1 + token2, sessionKey);
        sessionStorage.setItem("sessionKey", sessionKey); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        console.log("üîë –ù–æ–≤—ã–π —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", sessionKey);
    } else {
        console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:", sessionKey);
    }

    return encryptMessage(message, sessionKey);
};

export const decryptChatMessage = async (encryptedMessage: string, token1: string, token2: string) => {
    let sessionKey = sessionKeyCache.get(token1 + token2);

    if (!sessionKey) {
        sessionKey = sessionStorage.getItem("sessionKey") || generateSessionKey(token1, token2);
        sessionKeyCache.set(token1 + token2, sessionKey);
        console.log("üîë –ù–æ–≤—ã–π —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏):", sessionKey);
    } else {
        console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á (–¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏):", sessionKey);
    }

    return decryptMessage(encryptedMessage, sessionKey);
};
