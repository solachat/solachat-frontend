const CHAT_CACHE = "cached-chats";

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∏–∑ `Cache Storage`
export const getCachedChats = async (): Promise<any[] | null> => {
    const cache = await caches.open(CHAT_CACHE);
    const cachedResponse = await cache.match("/chats");

    if (cachedResponse) {
        const data = await cachedResponse.json();
        console.log("üìå –ß–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ:", data);
        return data;
    }

    console.warn("‚ö†Ô∏è –í `Cache Storage` –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö `/chats`");
    return null;
};


// üìå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
export const cacheChats = async (chats: any[]): Promise<void> => {
    console.log("üìå –ö—ç—à–∏—Ä—É–µ–º —á–∞—Ç—ã:", chats); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    const cache = await caches.open(CHAT_CACHE);
    const response = new Response(JSON.stringify(chats), { headers: { "Content-Type": "application/json" } });
    await cache.put("/chats", response);
};


// üìå –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —á–∞—Ç–æ–≤
export const clearChatCache = async (): Promise<void> => {
    await caches.delete(CHAT_CACHE);
};
